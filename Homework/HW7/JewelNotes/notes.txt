## Exercise A - Treesort
### Purpose
  The purpose of this exercise is to implement the Treesort Algoirithm which will require at elast a partial implementation of a Binary Search Tree including insertion, inorder traversal, and iterator usage.

### Instructions
- At this point, all coding standards now apply!
-  [ ] call your function template treesort using the following prototype:
  ```
  template <typename FDIter>
  void treesort(FDIter first, FDIer, last);
  ```
- [x] implement your function template with in tsort.hpp
  - since this is a template there will be no associated source file!
  - note that your header file may define any other functions and classes you want.

- [ ] what the functions should do!
  - treesort should take two forward iterators. These will specify a range to be sorted as normal.
    - if both first and last iterators are equal, the range is empty.
  - treesort sorts the given range in a STABLE maner using operator <.
      - the stored data is in the same place as the original data.
      - the function must use the treesort algorithm from in class.

- [ ] the Binary Search tree
- [ ] 